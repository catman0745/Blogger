// <auto-generated />
using System;
using Catman.Blogger.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Catman.Blogger.Data.Migrations
{
    [DbContext(typeof(BloggerDbContext))]
    [Migration("20200911174614_AddImage")]
    partial class AddImage
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Catman.Blogger.Core.Models.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OwnerUsername")
                        .IsRequired()
                        .HasColumnName("owner")
                        .HasColumnType("character varying(25)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OwnerUsername");

                    b.ToTable("blogs");
                });

            modelBuilder.Entity("Catman.Blogger.Core.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnName("content_type")
                        .HasColumnType("character varying(127)")
                        .HasMaxLength(127);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnName("file_name")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("OwnerUsername")
                        .IsRequired()
                        .HasColumnName("owner")
                        .HasColumnType("character varying(25)");

                    b.HasKey("Id");

                    b.HasIndex("FileName")
                        .IsUnique();

                    b.HasIndex("OwnerUsername");

                    b.ToTable("images");
                });

            modelBuilder.Entity("Catman.Blogger.Core.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BlogId")
                        .HasColumnName("blog_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnName("last_update")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("Title", "BlogId")
                        .IsUnique();

                    b.ToTable("posts");
                });

            modelBuilder.Entity("Catman.Blogger.Core.Models.User", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnName("full_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.HasKey("Username");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Catman.Blogger.Core.Models.Blog", b =>
                {
                    b.HasOne("Catman.Blogger.Core.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Catman.Blogger.Core.Models.Image", b =>
                {
                    b.HasOne("Catman.Blogger.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("OwnerUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Catman.Blogger.Core.Models.Post", b =>
                {
                    b.HasOne("Catman.Blogger.Core.Models.Blog", null)
                        .WithMany()
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
